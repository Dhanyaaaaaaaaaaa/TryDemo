/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Customer;
import org.openapitools.model.CustomerCreate;
import org.openapitools.model.CustomerUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-18T13:32:23.431172+05:30[Asia/Calcutta]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "customers", description = "the customers API")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /customers/{customerId} : Delete a customer
     * Remove a customer from the system by ID.
     *
     * @param customerId ID of the customer to delete (required)
     * @return Customer deleted successfully (status code 204)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "customersCustomerIdDelete",
        summary = "Delete a customer",
        description = "Remove a customer from the system by ID.",
        responses = {
            @ApiResponse(responseCode = "204", description = "Customer deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customers/{customerId}"
    )
    
    default ResponseEntity<Void> customersCustomerIdDelete(
        @Parameter(name = "customerId", description = "ID of the customer to delete", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers/{customerId} : Get customer details
     * Retrieve details for a specific customer by ID.
     *
     * @param customerId ID of the customer to retrieve (required)
     * @return Customer details (status code 200)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "customersCustomerIdGet",
        summary = "Get customer details",
        description = "Retrieve details for a specific customer by ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{customerId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Customer> customersCustomerIdGet(
        @Parameter(name = "customerId", description = "ID of the customer to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /customers/{customerId} : Update a customer
     * Update details for a specific customer.
     *
     * @param customerId ID of the customer to update (required)
     * @param customerUpdate  (required)
     * @return Customer updated successfully (status code 200)
     *         or Customer not found (status code 404)
     */
    @Operation(
        operationId = "customersCustomerIdPut",
        summary = "Update a customer",
        description = "Update details for a specific customer.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "404", description = "Customer not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers/{customerId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> customersCustomerIdPut(
        @Parameter(name = "customerId", description = "ID of the customer to update", required = true, in = ParameterIn.PATH) @PathVariable("customerId") String customerId,
        @Parameter(name = "CustomerUpdate", description = "", required = true) @Valid @RequestBody CustomerUpdate customerUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers : Get a list of customers
     * Retrieve a list of all customers in the system.
     *
     * @return A list of customers (status code 200)
     */
    @Operation(
        operationId = "customersGet",
        summary = "Get a list of customers",
        description = "Retrieve a list of all customers in the system.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of customers", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Customer>> customersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"email\" : \"email\" }, { \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /customers : Create a new customer
     * Add a new customer to the system.
     *
     * @param customerCreate  (required)
     * @return Customer created successfully (status code 201)
     */
    @Operation(
        operationId = "customersPost",
        summary = "Create a new customer",
        description = "Add a new customer to the system.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Customer created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> customersPost(
        @Parameter(name = "CustomerCreate", description = "", required = true) @Valid @RequestBody CustomerCreate customerCreate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"phone\", \"name\" : \"name\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
